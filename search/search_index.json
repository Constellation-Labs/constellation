{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Documentation for the Constellation Labs DAG project. Source available on Github.","title":"Introduction"},{"location":"#introduction","text":"Documentation for the Constellation Labs DAG project. Source available on Github.","title":"Introduction"},{"location":"architecture/","text":"Architecture documentation Diagrams ledger architecture node-architecture protocol-data-flow-sketch","title":"Architecture"},{"location":"architecture/#architecture-documentation","text":"","title":"Architecture documentation"},{"location":"architecture/#diagrams","text":"","title":"Diagrams"},{"location":"architecture/#ledger-architecture","text":"","title":"ledger architecture"},{"location":"architecture/#node-architecture","text":"","title":"node-architecture"},{"location":"architecture/#protocol-data-flow-sketch","text":"","title":"protocol-data-flow-sketch"},{"location":"design-choices/","text":"On design choices This file summarizes current resoning for our approach and design decisions, reviews and references. Many decissions can be traced back to the fundamental goal to provide and accessible, scalable protocol that focuses on solving the consensus task. For a cursory glipse into the core teams perspectives, you may check out the following clips: youtube.com/constellation-labs/talk-at-Tech-Crunch (Oct. 2018, 28 mins) youtube.com/constellation-labs/testnet-overview (Aug. 2018, 22 mins) Why scala? There are some general notes on Scala and also on other functional programming languages actively used for crypto projects in the /wiki/Comparisons-to-other-protocols . One motivating factor as language of choice for the reference implementation of the protocol was of course the core teams experience with it, as well as the useful packages like akka actors and apache spark on the Java virtual machine (JVM). The constellation code base also makes extensive use of the type hierarchy features. In fact, the para-protocol approach to dApp integration builds on it. On architecture For diagrams, see /docs/architecture.md . Feedback Please communicate suggestions by making a thread on the community portal Orion or approaching the developers on the discord server:","title":"Design choices"},{"location":"design-choices/#on-design-choices","text":"This file summarizes current resoning for our approach and design decisions, reviews and references. Many decissions can be traced back to the fundamental goal to provide and accessible, scalable protocol that focuses on solving the consensus task. For a cursory glipse into the core teams perspectives, you may check out the following clips: youtube.com/constellation-labs/talk-at-Tech-Crunch (Oct. 2018, 28 mins) youtube.com/constellation-labs/testnet-overview (Aug. 2018, 22 mins)","title":"On design choices"},{"location":"design-choices/#why-scala","text":"There are some general notes on Scala and also on other functional programming languages actively used for crypto projects in the /wiki/Comparisons-to-other-protocols . One motivating factor as language of choice for the reference implementation of the protocol was of course the core teams experience with it, as well as the useful packages like akka actors and apache spark on the Java virtual machine (JVM). The constellation code base also makes extensive use of the type hierarchy features. In fact, the para-protocol approach to dApp integration builds on it.","title":"Why scala?"},{"location":"design-choices/#on-architecture","text":"For diagrams, see /docs/architecture.md .","title":"On architecture"},{"location":"design-choices/#feedback","text":"Please communicate suggestions by making a thread on the community portal Orion or approaching the developers on the discord server:","title":"Feedback"},{"location":"running-a-node/","text":"Running a node Constellation nodes are currently released as JAR file. These can be run on any system supporting java 8 or higher. Download release Releases are currently distributed as Java JAR files. Download the latest from github. Node Requirements To run a constellation node, you'll need a machine with java 8 or higher installed. While we expect that running on Windows will work, we have only internally tested on MacOS and Linux. Instance specs: We haven't spent much time optimizing for resource usage, so these specs are higher than we anticipate at mainnet. Currently, for testnet, we recommend: CPU: 2-core minimum. Memory: 3GB or higher Disk: 200GB available. Connecting To An Existing Network The most important configuration to connect to our testnet is providing a seed node to connect to. The easiest way to do this right now is to set it with an environment variable (example ip only, don't use): export DAG_SEED_PEER=123.456.123.456:9001 We are not currently running any publicly joinable network -- please get in touch on Telegram or Discord if you'd like to connect a node to our testnet network. Node Configuration Nodes can be configured in two ways. Some options are available through the cmdline, and more extensive options are available by supplying a configuration file. There is a default configuration file , but the options in it can be overriden by providing an additional conf file. The format is HOCON from Lightbend Config but is essentially a superset of YAML JSON. We intend to document available configuration options in more depth soon. Port Configuration A constellation node has two API's: A control API meant for the node operator to make changes to node operation, and a data (or peer) API, used by nodes to communicate with each other. By default, the control API uses port 9000, and the peer API uses port 9001. These can be overridden in the node configuration, but whatever they are set to, these ports must be open and exposed to the public internet. Where to Run As a team we have the most expertise with Google Cloud , and it is our recommended platform for those without one already, but any cloud provider will work. Cloud providers Any cloud provider should work fine. While we do all our testing on GCP (Google Cloud Provider), we are not using any proprietary features. If you can launch a machine, install java 8 or higher, assign an external IP, and open the ports for the control API and peer API, you shouldn't have any problems. Running a node at home While running a from your home internet is possible, it's not a supported or recommended setup. It can be difficult to properly expose ports on your computer to the public internet, because home networking equipment like modems and routers often have firewalls blocking these ports, and often home networks do not have a stable ip address. For now, our official recommendation is to use a cloud provider. Additional Tools Docker We intend to have official docker images soon -- stay tuned. Terraform (Optional!) At Constellation Labs we use terraform to quickly launch and destroy clusters for testing. Our terraform configurations are checked in to the repository in the terraform directory, so they are available as a guide if you'd like to use it yourself. They automate some nice but optional things like running the node as a service. They are currently setup for GCP, and they have a few constellation-specific hardcoded variables (backend storage location, project name). That said -- if you're familiar with terraform, they should be straightforward to adapt for your uses. While we are not officially supporting this right now, we can provide some support on discord for this method.","title":"Running a node"},{"location":"running-a-node/#running-a-node","text":"Constellation nodes are currently released as JAR file. These can be run on any system supporting java 8 or higher.","title":"Running a node"},{"location":"running-a-node/#download-release","text":"Releases are currently distributed as Java JAR files. Download the latest from github.","title":"Download release"},{"location":"running-a-node/#node-requirements","text":"To run a constellation node, you'll need a machine with java 8 or higher installed. While we expect that running on Windows will work, we have only internally tested on MacOS and Linux.","title":"Node Requirements"},{"location":"running-a-node/#instance-specs","text":"We haven't spent much time optimizing for resource usage, so these specs are higher than we anticipate at mainnet. Currently, for testnet, we recommend: CPU: 2-core minimum. Memory: 3GB or higher Disk: 200GB available.","title":"Instance specs:"},{"location":"running-a-node/#connecting-to-an-existing-network","text":"The most important configuration to connect to our testnet is providing a seed node to connect to. The easiest way to do this right now is to set it with an environment variable (example ip only, don't use): export DAG_SEED_PEER=123.456.123.456:9001 We are not currently running any publicly joinable network -- please get in touch on Telegram or Discord if you'd like to connect a node to our testnet network.","title":"Connecting To An Existing Network"},{"location":"running-a-node/#node-configuration","text":"Nodes can be configured in two ways. Some options are available through the cmdline, and more extensive options are available by supplying a configuration file. There is a default configuration file , but the options in it can be overriden by providing an additional conf file. The format is HOCON from Lightbend Config but is essentially a superset of YAML JSON. We intend to document available configuration options in more depth soon.","title":"Node Configuration"},{"location":"running-a-node/#port-configuration","text":"A constellation node has two API's: A control API meant for the node operator to make changes to node operation, and a data (or peer) API, used by nodes to communicate with each other. By default, the control API uses port 9000, and the peer API uses port 9001. These can be overridden in the node configuration, but whatever they are set to, these ports must be open and exposed to the public internet.","title":"Port Configuration"},{"location":"running-a-node/#where-to-run","text":"As a team we have the most expertise with Google Cloud , and it is our recommended platform for those without one already, but any cloud provider will work.","title":"Where to Run"},{"location":"running-a-node/#cloud-providers","text":"Any cloud provider should work fine. While we do all our testing on GCP (Google Cloud Provider), we are not using any proprietary features. If you can launch a machine, install java 8 or higher, assign an external IP, and open the ports for the control API and peer API, you shouldn't have any problems.","title":"Cloud providers"},{"location":"running-a-node/#running-a-node-at-home","text":"While running a from your home internet is possible, it's not a supported or recommended setup. It can be difficult to properly expose ports on your computer to the public internet, because home networking equipment like modems and routers often have firewalls blocking these ports, and often home networks do not have a stable ip address. For now, our official recommendation is to use a cloud provider.","title":"Running a node at home"},{"location":"running-a-node/#additional-tools","text":"","title":"Additional Tools"},{"location":"running-a-node/#docker","text":"We intend to have official docker images soon -- stay tuned.","title":"Docker"},{"location":"running-a-node/#terraform-optional","text":"At Constellation Labs we use terraform to quickly launch and destroy clusters for testing. Our terraform configurations are checked in to the repository in the terraform directory, so they are available as a guide if you'd like to use it yourself. They automate some nice but optional things like running the node as a service. They are currently setup for GCP, and they have a few constellation-specific hardcoded variables (backend storage location, project name). That said -- if you're familiar with terraform, they should be straightforward to adapt for your uses. While we are not officially supporting this right now, we can provide some support on discord for this method.","title":"Terraform (Optional!)"}]}