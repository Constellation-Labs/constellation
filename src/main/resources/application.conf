akka {
  loglevel = "INFO"

  log-dead-letters-during-shutdown = true

  actor {
    warn-about-java-serializer-usage = false
    debug {
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on
      unhandled = on
    }
  }

  http {
    server {
      remote-address-header = off
      request-timeout = 60s
      unbind-api-timeout = 6s
    }
    host-connection-pool {
      max-open-requests = 1024
    }
  }
}


api-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

default-timeout-seconds = 60
connection-timeout = 5s

http {
  interface = "0.0.0.0"
  port = 9000
  peer-port = 9001
}

udp {
  interface = "0.0.0.0"
  port = 16180
}

auth {
  enabled = false
  id = dev
  id = ${?DAG_API_ID}
  password = p4ssw0rd
  password = ${?DAG_API_PASS}
}

h2mem1 = {
  url = "jdbc:h2:mem:test1"
  driver = org.h2.Driver
  connectionPool = disabled
  keepAliveConnection = true
}

seedPeers = [${?DAG_SEED_PEER}]

download = {
  waitForPeers = 15 // seconds
  getSnapshotTimeout = 100 // seconds
}

constellation {
  snapshot-size-disk-limit = 1 GB
  consensus {
    maxTransactionThreshold = 50
    maxObservationThreshold = 50
    start-own-interval = 5s
    cleanup-interval = 10s
    union-proposals-timeout = 10s
    arbitrary-data-proposals-timeout = 3s
    checkpoint-block-resolve-majority-timeout = 10s
    accept-resolved-majority-block-timeout = 10s
    form-checkpoint-blocks-timeout = 40s
    arbitrary-data-distance-base = "hash"
  }
  cache {
    expire-after-min {
      proposals = 10
    }
  }
  health-check {
    p2p-interval = 10s
  }
  storage {
    gcp {
      enabled = false
      bucket-name = sys.env.get("CL_GCP_BUCKET").getOrElse("")
      path-to-permission-file = sys.env.get("CL_GCP_PERMISSION").getOrElse("")
    }
    aws {
      enabled = false
      bucket-name = sys.env.get("CL_AWS_BUCKET").getOrElse("")
      region = sys.env.get("CL_AWS_REGION").getOrElse("")
      aws-access-key = sys.env.get("CL_AWS_ACCESS_KEY").getOrElse("")
      aws-secret-key = sys.env.get("CL_AWS_SECRET_KEY").getOrElse("")
    }
    soe {
      memPoolExpiration = 3h
    }
  }
  snapshot {
    snapshotHeightInterval = 2
    snapshotHeightDelayInterval = 20
    snapshotHeightRedownloadDelayInterval = 30
    meaningfulSnapshotsCount = 100
  }
  transaction {
    generator {
      randomTransactionLoopTimeSeconds = 10
      maxTransactionsPerRound = 5
      emptyTransactionsRounds = 5
      amountTransactionsRounds = 5
    }
  }
  staking-amount = 250000
  max-width = 10
  dataPollingManagerOn = false
}
