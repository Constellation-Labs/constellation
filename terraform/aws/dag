#!/usr/bin/env bash

#set -e

red='\033[1;31m'
grn='\033[1;32m'
yel='\033[1;33m'
blu='\033[1;36m'
pnk='\033[1;35m'
clr='\033[0m'

# TODO: Check for pssh

READLINK=`readlink $0`
if [[ "$READLINK" == "" ]]; then DIR="$PWD"; else DIR="$(dirname $READLINK)"; fi

CONFIRMED=0

### Functions

checkTag() {
  pushd $DIR > /dev/null
  TAG=$(terraform workspace show)
  popd > /dev/null
}

checkHosts() {
  if [ -z "${HOSTS_FILE:-}" ]; then
    echo -e "${red}HOSTS_FILE was not set${clr}"
    exit 1
  fi

  if [ $CONFIRMED -eq 0 ]; then
    name=$(basename $HOSTS_FILE)

    read -p "$(echo -e "Do you want to continue using hosts: ${grn}$name${clr} (y/n)? ")" choice
    case "$choice" in
      y|Y ) CONFIRMED=1 ;;
      n|N ) exit 1 ;;
      * ) exit 1;;
    esac
  fi
}

setHosts() {
  HOSTS_FILE=$DIR/hosts-$(terraform workspace show)
}

assemble() {
  echo -e "${blu} Assembling${clr}"

  pushd $DIR/../../ > /dev/null
  sbt "++ 2.12.10" assembly
  popd > /dev/null
}

upload() {
  checkTag

  pushd $DIR/../../ > /dev/null
  version=$(cat build.sbt | grep 'version\ \= \".*\"' | cut -d'"' -f2)
  popd > /dev/null

  jarName="constellation-assembly-$version.jar"

  echo -e "${blu} Uploading ${yel}$jarName${blu} to S3 bucket${clr} as ${yel}dag-$TAG.jar${clr}"
  aws s3 cp $DIR/../../target/scala-2.12/$jarName s3://constellationlabs-dag/cluster/dag-$TAG.jar --acl public-read-write
  echo -e "dag-$TAG.jar has been sent to s3://constellationlabs-dag/cluster/dag-$TAG.jar"
}

updateJar() {
  checkHosts
  checkTag
  echo -e "${blu} Updating jar${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i "sudo wget https://constellationlabs-dag.s3.amazonaws.com/cluster/dag-$TAG.jar -O /home/admin/constellation/dag.jar" && \
  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i "sudo chown -R admin:admin /home/admin/constellation"
}

start() {
  checkHosts
  echo -e "${blu} Starting a cluster${clr}"

  ip=`head -1 $HOSTS_FILE`

  echo -e "${blu} Using: ${grn}$ip${blu} as a genesis node.${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i 'sudo cp /home/admin/constellation/start_node /home/admin/constellation/start'

  ssh admin@$ip -o StrictHostKeyChecking=no 'sudo cp /home/admin/constellation/start_genesis /home/admin/constellation/start'

  restart
}

rollback() {
  stop
  echo -e "${blu} Performing the rollback${clr}"

  ip=`head -1 $HOSTS_FILE`

  echo -e "${blu} Using: ${grn}$ip${blu} as a rollback node.${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i 'sudo cp /home/admin/constellation/start_node /home/admin/constellation/start'

  ssh admin@$ip -o StrictHostKeyChecking=no 'sudo cp /home/admin/constellation/start_rollback /home/admin/constellation/start'

  restart

  ip=`head -1 $HOSTS_FILE`
  echo -e "${blu} Used: ${grn}$ip${blu} as a rollback node.${clr}"
}

restart() {
  checkHosts
  echo -e "${blu} Restarting${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i 'sudo rm -rf /home/admin/constellation/tmp && sudo rm -f /home/admin/constellation/logs/app.log && sudo systemctl restart constellation && sudo service filebeat restart'

  sleep 15

  headIP=`head -1 $HOSTS_FILE`
  while read ip; do
    if [ "$ip" == "$headIP" ]; then
      echo "Skipping genesis node"
    else
      echo "Joining node: $ip"
      ssh admin@$ip -o StrictHostKeyChecking=no -n "curl -s -X POST http://127.0.0.1:9002/join -H 'Content-type: application/json' -d '{ \"host\": \"$headIP\", \"port\": 9001 }'"
      sleep 10
    fi
  done <$HOSTS_FILE
}

stop() {
  checkHosts
  echo -e "${blu} Stopping nodes${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i 'sudo systemctl stop constellation'
}

exportIPs() {
  checkTag

  pushd $DIR > /dev/null
  terraform output -json instance_ips | jq ".[]" -r > hosts-$TAG
  popd > /dev/null

  echo "$DIR/hosts-$TAG"
}

redeploy() {
  echo -e "${blu} Re-deploying${clr}"

  assemble
  upload
  updateJar
  restart
}

autostart() {
  assemble
  upload

  pushd $DIR > /dev/null
  terraform apply -auto-approve -var "instance_count=$2"
  popd > /dev/null

  exportIPs
  setHosts
  whitelist

  start
}

clearLogs() {
  checkHosts
  echo -e "${blu} Clear all logs${clr}"

  pssh -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no -i 'sudo rm -rf /home/admin/constellation/logs'
}

output() {
  pushd $DIR > /dev/null
  terraform output
  popd > /dev/null
}

workspace() {
  pushd $DIR > /dev/null
  terraform workspace $2 $3
  popd > /dev/null
}

grafana() {
  pushd $DIR > /dev/null
  open "http://$(terraform output grafana_ip):3000/d/9DCwiDQiz/constellationnode-jvm"
  popd > /dev/null
}

whitelist() {
  checkTag
  checkHosts

  i=0
  while read ip; do
    line=$((i+1))
    id=$(awk "NR==$line {print; exit}" ids)
    if [ $i -eq 0 ]; then
      echo "$ip,$id" > whitelisting-$TAG
    else
      echo "$ip,$id" >> whitelisting-$TAG
    fi

    ((i++))
  done <$HOSTS_FILE

  pscp -l admin -h $HOSTS_FILE -O StrictHostKeyChecking=no whitelisting-$TAG /home/admin/constellation/whitelisting
}

############

usage=$(cat <<-EOF
Usage: $(basename $0) <command> [args]

Common commands:
    autostart ${grn}n${clr} \t Start cluster with ${grn}n${clr} nodes
    restart \t\t Restart nodes with genesis flow
    exportIPs \t\t Return path to the hosts file (use as ${grn}export HOSTS_FILE=\$(dag exportIPs)${clr})
    redeploy \t\t Redeploy the cluster (assemble -> upload -> updateJar -> restart)
    whitelist \t\t Creates whitelisting files on nodes for current env

Diagnostic commands:
    assemble \t\t Assemble the jar file
    upload \t\t Upload the jar file to s3
    updateJar \t\t Update jar file on all nodes
    start \t\t Start nodes using genesis flow
    stop \t\t Stop constellation.service on all nodes
    clearLogs \t\t Remove logs directory on all nodes

Terraform commands:
    output \t\t\t Display output from terraform
    workspace ${grn}select|new ${red}name${clr} \t Manage workspace
    grafana \t\t\t Open grafana
EOF)

if [[ $1 == "" ]]; then
  echo -e "$usage"
  exit 1
fi

case "$1" in
  assemble)
    assemble
    ;;
  upload)
    upload
    ;;
  updateJar)
    updateJar
    ;;
  start)
    start
    ;;
  rollback)
    rollback
    ;;
  restart)
    restart
    ;;
  stop)
    stop
    ;;
  redeploy)
    redeploy
    ;;
  exportIPs)
    exportIPs
    ;;
  autostart)
    autostart "$@"
    ;;
  clearLogs)
    clearLogs
    ;;
  output)
    output
    ;;
  workspace)
    workspace "$@"
    ;;
  grafana)
    grafana
    ;;
  whitelist)
    whitelist
    ;;
  *)
    echo -e "$usage"
    exit 1
esac

exit 0
