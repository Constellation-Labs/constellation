# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/constellation

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.sbt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: cat /dev/null | sbt test:compile

      # Update this to use the cache defined in the other step.
      - save_cache:
          paths:
            - ~/.m2
            - ~/.iv2
            - ~/.ivy2
            - lib_managed
            - ~/.sbt
          key: v1-dependencies--{{ checksum "build.sbt" }}
        
      # run tests!
      - run: cat /dev/null | sbt test:test

  publish:
    machine:
      docker_layer_caching: true
      services:
        - docker

    working_directory: ~/constellation

    general:
      artifacts:
        - target/universal

    # This doesn't appear to work... need something to cache dependencies.
    dependencies:
      cache_directories:
        - "~/.ivy2"
        - "lib_managed" #### <-- need this
        - "target"
        - "project/target"
        - "~/.ivy2/cache"
        - "~/.sbt"
        - "~/.m2"
        - "target/resolution-cache"
        - "target/streams"
        - "project/target/resolution-cache"
        - "project/target/streams"
      override:
        - sbt compile

    # For gcloud https://circleci.com/docs/1.0/google-cloud-platform/
    pre:
      - pyenv global 2.7.12

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      IMAGE_REPO: constellationlabs
      # This doesn't work but its directly from their examples...?
      #SHORT_GIT_HASH: $(echo $CIRCLE_SHA1 | cut -c -7)

    steps:
      - checkout

      # This doesn't appear to work with sbt docker:publishLocal
      # Download and cache dependencies
      - restore_cache:
          keys:
       #   - publish-dependencies--{{ checksum "build.sbt" }}
          # fallback to using the latest cache if no exact match is found
          - publish-dependencies2 #-

      - run:
          command: sbt docker:publishLocal

      - save_cache:
          paths:
            - ~/.m2
            - ~/.iv2
            - ~/.ivy2
            - lib_managed
            - ~/.sbt
          key: publish-dependencies2 #--{{ checksum "build.sbt" }}

      - run:
          command: sudo docker tag constellationlabs/constellation:$CIRCLE_SHA1 gcr.io/$GOOGLE_PROJECT_ID/constellationlabs/constellation:$CIRCLE_SHA1
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud --quiet components update kubectl
      - run:
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/account-auth.json
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud auth activate-service-account --key-file ${HOME}/account-auth.json
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud config set project $GOOGLE_PROJECT_ID
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud --quiet config set container/cluster $GOOGLE_CLUSTER_NAME
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME
      - run:
          command: sudo /opt/google-cloud-sdk/bin/gcloud docker -- push gcr.io/$GOOGLE_PROJECT_ID/constellationlabs/constellation:$CIRCLE_SHA1
   #   - run:
   #       command: sudo  /opt/google-cloud-sdk/bin/kubectl delete -f ./deploy/kubernetes/node-deployment.yml
      - run:
          command: sed -i "s/constellation:latest/constellation:$CIRCLE_SHA1/g" ./deploy/kubernetes/node-deployment.yml
      - run:
          command: cat ./deploy/kubernetes/node-deployment.yml
      - run:
          command: chmod +x ./deploy/kubernetes/deploy.sh; ./deploy/kubernetes/deploy.sh
      - run:
          command: sbt it:test

   #   - run:
   #       command: sudo  /opt/google-cloud-sdk/bin/kubectl apply -f ./deploy/kubernetes/node-deployment.yml

   # This also appears to not actually do anything.. it registers the event but the pods don't update.
   #   - run:
   #       command: sudo  /opt/google-cloud-sdk/bin/kubectl apply -f ./deploy/kubernetes/node-deployment.yml

      # Maybe able to patch but didn't work. Possibly due to json array in containers? Test later
   #       command: sudo  /opt/google-cloud-sdk/bin/kubectl patch deployment constellation-node -p '{"spec":{"template":{"spec":{"containers":[{"name":"constellation","image":"gcr.io/esoteric-helix-197319/constellationlabs/constellation:'"$CIRCLE_SHA1"'"}]}}}}'
    #


workflows:
  version: 2
  build:
    jobs:
      - build
  #    - publish:
  #        requires:
  #          - build
  #        filters:
  #          branches:
  #            only: master
 # publish-override:
 #   jobs:
  #    - hold:
   #       type: approval
  #    - publish:
   #       requires:
   #         - hold